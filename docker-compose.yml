#version: '3.8'
services:
  traefik:
    image: "traefik:v2.10"
    container_name: traefik
    command:
      - --api.insecure=true # Enables the Traefik Dashboard
      - --api.dashboard=true # Explicitly enables the dashboard (good practice)
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:8080 # This will still be internal port 8080
      - --providers.file.filename=/etc/traefik/traefik-dynamic-config.yaml
      - --providers.file.watch=true
      - --log.level=INFO
      - --entrypoints.traefik.address=:8081 # <--- ADD THIS LINE: Assign a dedicated internal port for the dashboard
    ports:
      - "80:80"
      - "8443:8080" # This maps host 8443 to internal container 8080 (for websecure)
      - "8081:8081" # This maps host 8081 to internal container 8081 (for dashboard)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-dynamic-config.yaml:/etc/traefik/traefik-dynamic-config.yaml:ro
      - ./certs:/etc/traefik/certs:ro
    networks:
      - ffa-network


  backend:
    build:
      context: . # Build context is the project root (FFA/)
      dockerfile: ./App/backend/Dockerfile # Path to the backend's Dockerfile relative to the context
    container_name: ffa-backend-1
    volumes:
      - ./App/backend:/app/backend # Mount backend source code for development
    networks:
      - ffa-network

  api_server:
    build:
      context: . # Build context is the project root (FFA/)
      dockerfile: ./App/api_server/Dockerfile # Path to the api_server's Dockerfile relative to the context
    container_name: ffa-api_server-1
    env_file:
      - ./.env
    environment:
      - YAHOO_LEAGUE_ID=${YAHOO_LEAGUE_ID}
      - YAHOO_CONSUMER_KEY=${YAHOO_CONSUMER_KEY} # Will be read from your .env file
      - YAHOO_CONSUMER_SECRET=${YAHOO_CONSUMER_SECRET} # Will be read from your .env file
      - YAHOO_REDIRECT_URI=https://localhost:8443/connect/yahoo/callback # **Crucial: Update this**
      - PORT=8080 # Your application listens on this internal port
    volumes:
      - ./App/api_server:/app/api_server # Mount api_server source code
      - ./App/backend:/app/backend # Mount backend data/logic (if api_server depends on it this way)
    # IMPORTANT: Remove the direct 'ports' mapping for api_server.
    # Traefik will handle exposing 8080 externally and routing to the internal 8080.
    # ports:
    #   - "8080:8080"
    command: uvicorn api_server.main:app --host 0.0.0.0 --port 8080 --reload # Your existing command
    networks:
      - ffa-network
    depends_on:
      - backend # Ensures backend starts before api_server
    labels:
      - "traefik.enable=true" # Tell Traefik to manage this service
      - "traefik.http.routers.api_server.rule=Host(`localhost`)" # Route requests for 'localhost' to this service
      - "traefik.http.routers.api_server.entrypoints=websecure" # Use the HTTPS entrypoint defined in Traefik
      - "traefik.http.routers.api_server.tls=true" # Enable TLS for this router, using certificates defined in dynamic config
      - "traefik.http.services.api_server.loadbalancer.server.port=8080" # Direct Traefik to the internal port of api_server

  frontend:
    build:
      context: ./frontend # <--- CORRECTED: This sets the build context to the frontend directory
      dockerfile: Dockerfile # <--- Dockerfile is directly inside the context
    container_name: ffa-frontend-1
    volumes:
      - ./frontend:/app # Mount frontend source code for development
      - /app/node_modules # Prevents host node_modules from conflicting with container's
    ports:
      - "5173:5173" # Keep this direct port mapping as Traefik is not managing the frontend for now
    command: ["npm", "run", "dev"] # Your existing command
    networks:
      - ffa-network

networks:
  ffa-network:
    external: false
